<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, tylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap.css">
    <link rel="stylesheet" href="/linker/styles/c-bootstrap-responsive.css">
    <link rel="stylesheet" href="/linker/styles/custom.css">
    <!--STYLES END-->
  </head>

  <body>
    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="brand" href="/"> activityOverlord</a>
            <div class="nav-collapse collapse">
              <ul class='nav'>
                <% if (session.authenticated) { %>
                  <li class='active'>
                    <a href="/user/show/<%= session.User.id %>">my profile</a>  
                </li>
                <% } %>
                <% if (session.User && session.User.admin) { %>
                  <li class='active'>
                    <a href="/user">list all users</a>  
                  </li>
                <% } %>  
              </ul>
              <div class="nav pull-right">
                  <% if (session.authenticated) { %>
                    <a class="btn" href="/session/destroy">sign-out</a>
                  <% } %>
              </div>
              <% if (!session.authenticated) { %>
                <form action="/session/create" method="POST" class="navbar-form pull-right">
                  <input class="span2" type="text" placeholder="Email" name="email">
                  <input class="span2" type="password" placeholder="Password" name="password">
                  <button type="submit" class="btn">Sign in</button>
                  <input type="hidden" name="_csrf" value="<%= _csrf %>" />
                </form>
              <% } %>
            </div>            
          </div>
        </div>
    </div>
    
    <%- body %>

    <div class="container">
      <hr>
      <footer class="footer">
        <ul class="nav pull-right">
          <li><a href="http://sailsjs.com/">sails.js</a> tutorial by irl nathan, with a bunch of help from mike, cody, and zoli</li>
        </ul>
      </footer>
    </div>



    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/$.js"></script>
    <script src="/linker/js/bootstrap.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
